AWSTemplateFormatVersion: '2010-09-09'
Description: StarRocks Cluster Bastion Stack
Metadata:
  LICENSE: Apache License Version 2.0
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Public/private key pairs allow you to securely connect to your instance after it launches.
        Parameters:
          - KeyPairName
      - Label:
          default: Network Configuration
        Parameters:
          - VPCID
          - PublicSubnet1ID
          - PublicSubnet2ID
      - Label:
          default: Bastion Stack Configuration
        Parameters:
          - LatestAmiId
          - RemoteAccessCIDR
    ParameterLabels:
      KeyPairName:
        default: AWS Key Pair Name
      VPCID:
        default: VPC ID
      PublicSubnet1ID:
        default: Public Subnet 1 ID
      PublicSubnet2ID:
        default: Public Subnet 2 ID
      LatestAmiId:
        default: Bastion LatestAmiId
      RemoteAccessCIDR:
        default: External Bastion Access CIDR
Parameters:
  KeyPairName:
    Description: The name of an existing public/private key pair, which allows you to securely connect to your instance after it launches.
    Type: AWS::EC2::KeyPair::KeyName
  VPCID:
    Description: ID of your existing VPC for deployment(e.g., vpc-fd990584)
    Type: AWS::EC2::VPC::Id
  PublicSubnet1ID:
    Description: ID of public subnet 1 in Availability Zone 1 for the ELB load balancer (e.g., subnet-9bc642ac)
    Type: AWS::EC2::Subnet::Id
  PublicSubnet2ID:
    Description: ID of public subnet 2 in Availability Zone 2 for the ELB load balancer (e.g., subnet-e3246d8e)
    Type: AWS::EC2::Subnet::Id
  LatestAmiId:
    Description: AMI id for bastion instance, starts with ami
    Type: String
  RemoteAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: >-
      CIDR block that allows external SSH access to the bastion hosts,
      e.g., x.x.x.x/16-28. We recommend that you set this value to a trusted
      CIDR block. For example, you might want to restrict access to your
      corporate network.
    Type: String

Rules:
  KeyPairsNotEmpty:
    Assertions:
      - Assert: !Not
          - 'Fn::EachMemberEquals':
              - 'Fn::RefAll': 'AWS::EC2::KeyPair::KeyName'
              - ''
        AssertDescription: AWS Key Pair Name parameters must not be empty
  SubnetsInVPC:
    Assertions:
    - Assert:
        Fn::EachMemberIn:
        - Fn::ValueOfAll:
          - AWS::EC2::Subnet::Id
          - VpcId
        - Fn::RefAll: AWS::EC2::VPC::Id
      AssertDescription: All subnets must in the VPC

Resources:
  # EIP for Bastion Instance
  BastionEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: !Ref VPCID

  # Bastion Internet Security Group
  BastionInternetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Internet Security group for bastion instance
      VpcId:  !Ref VPCID
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          CidrIp:
            0.0.0.0/0

  # Bastion Internal Security Group
  BastionInternalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Internal Security group for bastion instance.
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp:
            !Ref RemoteAccessCIDR

  # EC2 instance role
  BastionEC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: BastionEC2Role
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # IAM to let bastion instance associate EIP to self
              - Effect: Allow
                Action:
                  - ec2:AssociateAddress
                Resource: '*'

  # EC2 Instance Profile
  BastionEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    # DependsOn: BastionEC2Role
    Properties:
      Path: /
      Roles:
        - !Ref BastionEC2Role

  # Bastion Launch config
  BastionLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref  BastionEC2InstanceProfile
      ImageId: !Ref LatestAmiId
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref BastionInternalSecurityGroup
        - !Ref BastionInternetSecurityGroup
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash -x
          echo ${KeyPairName} > keyPairName.log
          yum install mysql -y

  # Bastion autoscaling group
  BastionAutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: 1
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300
      LaunchConfigurationName: !Ref BastionLaunchConfig
      MaxSize: 1
      MinSize: 1
      VPCZoneIdentifier:
        - !Ref PublicSubnet1ID
        - !Ref PublicSubnet2ID

Outputs:
  BastionStackName:
    Description: Bastion stack name
    Value: !Ref AWS::StackName
  BastionAutoscalingGroup:
    Description: Bastion auto scaling group name
    Value: !Ref BastionAutoscalingGroup
  BastionLaunchConfig:
    Description: Bastion launch config name
    Value: !Ref BastionLaunchConfig
  BastionEIP:
    Description: Bastion EIP address
    Value: !Ref BastionEIP
  BastionSecurityGroupID:
    Description: Bastion Security Group
    Value: !Ref BastionInternetSecurityGroup
